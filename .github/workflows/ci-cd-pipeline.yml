name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
    paths:
      - 'python-flask/**'
      - 'c-sharp-razor/**'
      - 'rust-actix/**'
      - 'ruby-sinatra/**'
      - 'javascript-express/**'
      - 'go-gin/**'
      - 'go-gorilla/**'
      - 'database/**'
      - '/**'
  push:
    branches:
      - main
    paths:
      - 'python-flask/**'
      - 'c-sharp-razor/**'
      - 'rust-actix/**'
      - 'ruby-sinatra/**'
      - 'javascript-express/**'
      - 'go-gin/**'
      - 'go-gorilla/**'

jobs:
  check-root-changes:
    name: Check Root-Level Changes
    runs-on: ubuntu-latest
    outputs:
      root_changed: ${{ steps.set-flags.outputs.root_changed }}
      service_changed: ${{ steps.set-flags.outputs.service_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check if root files or any service changed
        id: set-flags
        run: |
          # Initialize flags
          root_changed="false"
          any_service_changed="false"

          # Get the list of changed files by comparing against the base branch
          git fetch origin main
          changed_files=$(git diff --name-only origin/main...HEAD)

          # Check if any of the changed files are outside the known service directories
          for file in $changed_files; do
            if [[ ! "$file" =~ ^(python-flask/|c-sharp-razor/|rust-actix/|ruby-sinatra/|javascript-express/|go-gin/|go-gorilla/|\.github/) ]]; then
              root_changed="true"
              echo "Root-level file changed: $file"
            fi
            if [[ "$file" =~ ^(python-flask/|c-sharp-razor/|rust-actix/|ruby-sinatra/|javascript-express/|go-gin/|go-gorilla/) ]]; then
              any_service_changed="true"
              echo "Service-level file changed: $file"
            fi
          done

          # Set outputs
          echo "::set-output name=root_changed::$root_changed"
          echo "::set-output name=service_changed::$any_service_changed"

  run-all-tests:
    name: CI – Run All Tests
    runs-on: ubuntu-latest
    needs: check-root-changes
    if: ${{ needs.check-root-changes.outputs.root_changed == 'true' }}
    outputs:
      test_passed: ${{ steps.test-all.outputs.test_passed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Run all tests if root changed
        run: |
          echo "ROOT_CHANGED: ${{ needs.check-root-changes.outputs.root_changed }}"
          echo "SERVICE_CHANGED: ${{ needs.check-root-changes.outputs.service_changed }}"
          # Set up environment
          sudo apt-get update
          sudo apt-get install -y make python3-pip python3-venv
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.27.1/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

          # Set up Python virtual environment
          python3 -m venv venv
          ./venv/bin/pip install --upgrade pip
          ./venv/bin/pip install --no-cache-dir -r tests/requirements.txt

          # Run all tests
          source ./venv/bin/activate
          if make test-all; then
            echo "::set-output name=test_passed::true"
          else
            echo "::set-output name=test_passed::false"
          fi

        continue-on-error: false

  run-service-tests:
    name: CI – Service-Specific Tests
    runs-on: ubuntu-latest
    needs: check-root-changes
    if: ${{ needs.check-root-changes.outputs.service_changed == 'true' && needs.check-root-changes.outputs.root_changed == 'false' }}
    outputs:
      application_test_passed: ${{ steps.service-test.outputs.test_passed }}
    strategy:
      matrix:
        service:
          - python-flask
          - c-sharp-razor
          - rust-actix
          - ruby-sinatra
          - javascript-express
          - go-gin
          - go-gorilla
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check if this service requires testing
        id: service-check
        run: |
          if git diff --name-only origin/main...HEAD | grep -q "^${{ matrix.service }}/"; then
            echo "::set-output name=service_changed::true"
            echo "Service-specific changes detected for ${{ matrix.service }}"
          else
            echo "::set-output name=service_changed::false"
            echo "No changes detected for ${{ matrix.service }}; skipping tests."
          fi

      - name: Set up environment and run tests if service changed
        if: ${{ steps.service-check.outputs.service_changed == 'true' }}
        run: |
          # Set up environment
          sudo apt-get update
          sudo apt-get install -y make python3-pip python3-venv
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.27.1/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          docker-compose version

          # Set up Python virtual environment
          python3 -m venv venv
          ./venv/bin/pip install --upgrade pip
          ./venv/bin/pip install --no-cache-dir -r tests/requirements.txt

          # Run service-specific tests
          source ./venv/bin/activate
          if make test-service ${{ matrix.service }}; then
            echo "::set-output name=test_passed::true"
          else
            echo "::set-output name=test_passed::false"
          fi
        continue-on-error: false

  cd:
    name: CD –
    runs-on: ubuntu-latest
    needs: [ run-all-tests, run-service-tests ]
    if: ${{ needs.run-all-tests.outputs.test_passed == 'true' || needs.run-service-tests.outputs.application_test_passed == 'true' }}
    strategy:
      matrix:
        service:
          - python-flask
          - c-sharp-razor
          - rust-actix
          - ruby-sinatra
          - javascript-express
          - go-gin
          - go-gorilla
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: '1'

      - name: Get Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          files: |
            python-flask/**
            c-sharp-razor/**
            rust-actix/**
            ruby-sinatra/**
            javascript-express/**
            go-gin/**
            go-gorilla/**

      - name: Determine if Service Needs Build
        id: check_changes
        run: |
           service_changed="false"
           if [[ "${{ steps.changed-files.outputs.modified_files }}" == *"${{ matrix.service }}/"* ]] || [[ "${{ steps.changed-files.outputs.added_files }}" == *"${{ matrix.service }}/"* ]]; then
            echo "Changes detected in ${{ matrix.service }}."
            service_changed="true"
           else
            echo "No changes detected in ${{ matrix.service }}."
           fi
           echo "service_changed=$service_changed" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        if: env.service_changed == 'true'
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        if: ${{ env.service_changed == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Check if Dockerfile exists
        if: env.service_changed == 'true'
        id: check_file
        run: |
          if [ -d "./${{ matrix.service }}" ] && [ -f "./${{ matrix.service }}/Dockerfile" ]; then
            echo "found=true" >> $GITHUB_ENV
          else
            echo "found=false" >> $GITHUB_ENV
          fi

      - name: Build Docker Image
        if: ${{ env.found == 'true' && github.event_name == 'pull_request' }}
        run: |
          cd ${{ matrix.service }}
          IMAGE_NAME="simonharwick97822/${{ matrix.service }}"
          COMMIT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d%H%M)

          # Build the image without pushing in PRs
          docker buildx build --platform linux/arm64 \
            -t ${IMAGE_NAME}:latest \
            -t ${IMAGE_NAME}:commit-sha-${COMMIT_SHA}-${TIMESTAMP} \
            .

      - name: Build and Push Docker Image
        if: ${{ env.found == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        run: |
          cd ${{ matrix.service }}
          IMAGE_NAME="simonharwick97822/${{ matrix.service }}"
          COMMIT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d%H%M)

          docker buildx build --platform linux/arm64, linux/amd64 \
            -t ${IMAGE_NAME}:latest \
            -t ${IMAGE_NAME}:commit-sha-${COMMIT_SHA}-${TIMESTAMP} \
            --push .
